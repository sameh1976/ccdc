Checking the Current Timezone
timedatectl
ls -l /etc/localtime
timedatectl list-timezones
sudo timedatectl set-timezone your_time_zone

---------------------
List all Open Files with lsof Command

lsof
lsof -i
List User Specific Opened Files
lsof -u tecmint


---------------------
Configure NTP client
sudo apt-get install ntp
The ntpd configuration file is located at /etc/ntp.conf. Open this file in a text editor:
This file contains the list of NTP servers that will be used for time synchronization. By default, Ubuntu servers will be used (e.g. 0.ubuntu.pool.ntp.org). You can add your preferred servers or leave the defaults.
Next, restart the NTP deamon with the sudo service ntp reload command:
ntpq -p command to show a list of all the NTP servers
---------------------
IPTABLES

Reject from IP source:
sudo iptables -A INPUT -s 10.0.3.6 -j DROP or REJECT


---------------

Install and Configure VSFTPD server on Ubuntu 18.04 LTS
sudo apt-get install vsftpd -y

Once Vsftpd is installed, start Vsftpd service and enable it to start on boot time:

sudo systemctl start vsftpd
sudo systemctl enable vsftpd
Create Directory Structure for FTP
Before starting, you will need to create a user for FTP access.

You can create a user with the following command:

sudo adduser vsftp
Next, create ftp directory and set ownership with the following command:

sudo mkdir /home/vsftp/ftp
sudo chown nobody:nogroup /home/vsftp/ftp
sudo chmod a-w /home/vsftp/ftp
Next, create a directory where files can be uploaded and give ownership to vsftp user:

sudo mkdir /home/vsftp/ftp/test
sudo chown vsftp:vsftp /home/vsftp/ftp/test
Configure Vsftpd
Next, you will need to perform some configurations to setup FTP server.

First, create a backup of original config file:

sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.bak
Next, open the vsftpd.conf file:

sudo nano /etc/vsftpd.conf
Add the following lines:

 listen=NO
 listen_ipv6=YES
 anonymous_enable=NO
 local_enable=YES
 write_enable=YES
 local_umask=022
 dirmessage_enable=YES
 use_localtime=YES
 xferlog_enable=YES
 connect_from_port_20=YES
 chroot_local_user=YES
 secure_chroot_dir=/var/run/vsftpd/empty
 pam_service_name=vsftpd
 pasv_enable=Yes
 pasv_min_port=10000
 pasv_max_port=11000
 user_sub_token=$USER
 local_root=/home/$USER/ftp
 userlist_enable=YES
 userlist_file=/etc/vsftpd.userlist
 userlist_deny=NO
Save and close the file. You can change the above configuration according to your needs.

Next, you will also need to add vsftp user to /etc/vsftpd.userlist file to allow FTP access:

sudo nano /etc/vsftpd.userlist
Add the following line:

vsftp
Save and close the file, then restart Vsftpd service to apply these changes:

sudo systemctl restart vsftpd
Now, open your web browser and type the URL ftp://192.168.0.102, you will be asked to enter username and password to access FTP.  Enter your vsftp username and password, then click on the Ok button. You should see the following page:

Secure Vsftpd using SSL/TLS
Next, you will need to enable SSL/TLS to encrypt the data transferred via FTP.

To do so, you will need to create a certificate for that. You can create a certificate using OpenSSL using the following command:

sudo mkdir /etc/cert
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/cert/vsftpd.pem -out /etc/cert/vsftpd.pem
Next, you will need to modify vsftpd.conf file and make some changes:

sudo nano /etc/vsftpd.conf
Add the following lines:

rsa_cert_file=/etc/cert/vsftpd.pem
rsa_private_key_file=/etc/cert/vsftpd.pem
ssl_enable=YES
allow_anon_ssl=NO
force_local_data_ssl=YES
force_local_logins_ssl=YES
ssl_tlsv1=YES
ssl_sslv2=NO
ssl_sslv3=NO
require_ssl_reuse=NO
ssl_ciphers=HIGH
Save the file, then restart Vsftpd using the following command:

sudo systemctl restart vsftpd
Access FTP over SSL/TLS
You can not access your FTP server over SSL/TLS through browser. So, you will need to install FileZilla FTP client to access your FTP server. Because FileZilla supports FTP over SSL/TLS.

You can install FileZilla client using the following command:

sudo apt-get install filezilla -y







Flush INPUT
sudo iptables -F INPUT

Drop All
sudo iptables -A INPUT -J DROP


Accept from IP
sudo iptables -A INPUT -s 10.0.3.6 -j ACCEPT

Remove rule #2 for example
iptable -D INPUT 2


Reject OUTPUT based on protocol & port number
iptables -A OUTPUT -d udp --dport 53 -j DROP

Block an IP address from accessing your server
iptables -A INPUT -s IP-ADDRESS -j DROP

Block server access from an IP address only on a specific port on the server
iptables -A INPUT -s IP-ADDRESS -p tcp --destination-port port_number -j DROP

ACCEPT only ssh from IP
sudo iptables -I INPUT -s 192.168.1.65 -p tcp --dport 22 -j ACCEPT
---------------------

Find All Failed SSH login Attempts in Linux
grep "Failed password" /var/log/auth.log
egrep "Failed|Failure" /var/log/auth.log
---------------------
Enabling apparmor for Apache2 in Ubuntu 18.04
apt policy apparmor
apt install libapache2-mod-apparmor
aa-enforce /etc/apparmor.d/usr.sbin.apache2
If you are getting error like aa-enforce not found. int apparmor-utils

apt-get install apparmor-utils
To configure your appache, I followed the below url:

a2enmod mpm_prefork
a2enmod apparmor
service apache2 restart


Ubuntu 16.04: Enforce usr.sbin.sshd profile to AppArmor

Modify and apply usr.sbin.sshd profile
sudo cp /usr/share/doc/apparmor-profiles/extras/usr.sbin.sshd \
       /etc/apparmor.d/
Modify /etc/apparmor.d/usr.sbin.sshd with the following patch. This patch is created by DENIED message.

$ cd /etc/apparmor.d/
$ cat <<EOF | sudo patch -p1
--- a/usr.sbin.sshd       2017-03-16 10:11:02.000000000 +0900
+++ b/usr.sbin.sshd       2017-06-14 13:38:47.862170542 +0900
@@ -21,6 +21,7 @@
   #include <abstractions/consoles>
   #include <abstractions/nameservice>
   #include <abstractions/wutmp>
+  #include <abstractions/dbus>

   capability sys_chroot,
   capability sys_resource,
@@ -32,6 +33,8 @@
   capability setgid,
   capability setuid,
   capability audit_control,
+  capability audit_write,
+  capability net_admin,
   capability dac_override,
   capability dac_read_search,

@@ -51,10 +54,16 @@
   /var/log/btmp r,
   /{,var/}run w,
   /{,var/}run/sshd{,.init}.pid wl,
+  /{,var/}run/systemd/notify w,
+
+  ptrace,

   @{PROC}/@{pid}/fd/ r,
-  @{PROC}/@{pid}/loginuid w,
+  @{PROC}/@{pid}/loginuid rw,
   @{PROC}/@{pid}/limits r,
+  @{PROC}/@{pid}/uid_map r,
+  @{PROC}/@{pid}/environ r,
+  @{PROC}/cmdline r,

 # should only be here for use in non-change-hat openssh
 # duplicated from EXEC hat
@@ -85,6 +94,7 @@
 # duplicated from AUTHENTICATED
   /etc/motd r,
   /{,var/}run/motd{,.new} rw,
+  /{,var/}run/motd.dynamic{,.new} rw,
   /tmp/ssh-*/agent.[0-9]* rwl,

   /tmp/ssh-*[0-9]*/ w,
EOF

sudo aa-enforce /etc/apparmor.d/usr.sbin.sshd
